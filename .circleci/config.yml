version: 2.0

references:
  cloud_platform_container_config: &cloud_platform_container_config
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid

  build_container_config: &build_container_config
    docker:
    - image: circleci/ruby:2.6.3-node-browsers
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
    - image: circleci/postgres:10.5
    - image: circleci/redis:5.0
    - image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/laa-apply-for-legal-aid/clamav:1.0.2

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws login
      command: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-2 --no-include-email)

  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update

  setup_uat_kubectl: &setup_uat_kubectl
    run:
      name: Kubectl deployment setup UAT
      command: |
        $(aws ecr get-login --region eu-west-2 --no-include-email)
        setup-kube-auth
        kubectl config use-context uat

jobs:
  test:
    <<: *build_container_config
    steps:
    - checkout
    - *update_packages
    - run: sudo apt-get install -y postgresql-client
    - run: sudo apt-get install -y clamav-daemon
    - run: sudo apt-get install -y libreoffice
    - run: sudo apt-get install -y wkhtmltopdf
    - run: sudo apt-get install -y git-crypt
    - *decrypt_secrets
    - restore_cache:
        keys:
          - v1-gems-cache-{{ checksum "Gemfile.lock" }}
          - v1-gems-cache
    - run: gem install bundler -v 2.0.2
    - run: bundle install --path=vendor/bundle --jobs=4 && bundle clean
    - save_cache:
        key: v1-gems-cache-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle
    - run:
        name: Database Setup
        command: |
          git checkout origin/master
          bundle install --path=vendor/bundle --jobs=4
          bundle exec rake db:create db:schema:load
          git checkout -
          bundle install --path=vendor/bundle --jobs=4
          bundle exec rake db:migrate db:seed
    - restore_cache:
        keys:
          - v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
          - v1-yarn-packages-cache
    - run:
        name: Install Yarn packages
        command: yarn --frozen-lockfile
    - save_cache:
        key: v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
        paths:
          - node_modules
    - run:
        name: Run Rubocop
        command:  bin/rails rubocop
    - run:
        name: Run erblint
        command: bin/rails erblint

    - run:
        name: Run ruby tests
        command: bin/rails spec
    - run:
        name: Run integration tests
        command: SAVE_PAGES=true bin/rails cucumber
    - run:
        name: Generate webhint reports
        command: ./bin/generate_webhint_reports.sh
    - run:
        name: gzip webhint reports
        command: tar -zcvf hint-report.tar.gz hint-report/
    - store_artifacts:
        path: ./hint-report.tar.gz
        destination: webhint-reports
    - run:
        name: gzip html pages
        command: tar -zcvf html-pages.tar.gz tmp/webhint_inputs/
    - store_artifacts:
        path: ./html-pages.tar.gz
        destination: html-pages

  build_and_push:
    <<: *build_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *update_packages
    - run: sudo apt-get install -y git-crypt
    - *decrypt_secrets
    - run:
        name: Build docker images
        command: docker build -t app .
    - *update_packages
    - *setup_aws_login
    - run:
        name: Push docker image to ECR repo
        command: |
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"

          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          fi

  deploy_uat:
    <<: *cloud_platform_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to UAT
        command: |
          ./bin/uat_deploy

  deploy_staging:
    <<: *cloud_platform_container_config
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Kubectl deployment setup staging
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context staging
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to staging
        command: |
          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-staging.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    <<: *cloud_platform_container_config
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Kubectl deployment setup production
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context production
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to production
        command: |
          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-production.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}"

  clean_up_ecr:
    <<: *build_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *setup_aws_login
    - run:
        name: Delete old images from ecr repo
        command: |
          ./bin/clean_up_ecr

  delete_uat:
    <<: *cloud_platform_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - run:
        name: Delete UAT release
        command: |
          ./bin/delete_uat_release

workflows:
  version: 2
  test:
    jobs:
    - test
  build_and_deploy:
    jobs:
    - build_and_push
    - hold_uat:
        type: approval
    - deploy_uat:
        requires:
        - hold_uat
        - build_and_push
    - hold_staging:
        type: approval
        requires:
        - build_and_push
        filters:
          branches:
            only: master
    - deploy_staging:
        requires:
        - hold_staging
        filters:
          branches:
            only: master
    - hold_production:
        type: approval
        requires:
        - deploy_staging
        filters:
          branches:
            only: master
    - deploy_production:
        requires:
        - hold_production
        filters:
          branches:
            only: master
  delete_uat:
    jobs:
    - delete_uat:
        filters:
          branches:
            only: master
  nightly:
    triggers:
    - schedule:
        cron: "0 2 * * *"
        filters:
          branches:
            only: master
    jobs:
    - clean_up_ecr
    - deploy_staging
