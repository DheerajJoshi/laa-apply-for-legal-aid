require 'rails_helper'

RSpec.describe MalwareScanner do
  let(:provider) { create :provider }
  let(:file_path) { Rails.root.join('spec/fixtures/files/lorem_ipsum.pdf') }
  let(:file_details) do
    {
      name: Faker::File.file_name,
      size: Faker::Number.number(10).to_i,
      content_type: Faker::File.mime_type,
      foo: 'bar'
    }.stringify_keys
  end
  let(:malware_scan_result) { MalwareScanResult.last }

  subject do
    described_class.call(
      file_path: file_path,
      uploader: provider,
      file_details: file_details
    )
  end

  describe '#call' do
    it 'creates a MalwareScanResult record' do
      expect { subject }.to change { MalwareScanResult.count } .by(1)
    end

    it 'records uploader and details of file' do
      subject
      expect(malware_scan_result.uploader).to eq(provider)
      expect(malware_scan_result.file_details).to eq(file_details)
    end

    it 'returns created MalwareScanResult record' do
      expect(subject).to be_a(MalwareScanResult)
      expect(subject.id).to eq(malware_scan_result.id)
    end

    context 'file is safe' do
      it 'sets virus_found to false' do
        expect(subject.virus_found?).to eq(false)
      end
    end

    context 'virus is found' do
      let(:file_path) { Rails.root.join('spec/fixtures/files/malware.doc') }

      it 'sets virus_found to true' do
        expect(subject.virus_found?).to eq(true)
      end
    end

    context 'scan_result' do
      let(:scan_result) { Faker::Lorem.sentence }

      before { allow_any_instance_of(MalwareScanner).to receive(:`).and_return(scan_result) }

      it 'returns and records the result of the scan' do
        expect(subject.scan_result).to eq(scan_result.strip)
        expect(malware_scan_result.scan_result).to eq(scan_result.strip)
      end
    end
  end
end
